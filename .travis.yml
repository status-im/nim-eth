language: c

# https://docs.travis-ci.com/user/caching/
cache:
  ccache: true
  directories:
    - NimBinaries
    - rocksdbCache

git:
  # when multiple CI builds are queued, the tested commit needs to be in the last X commits cloned with "--depth X"
  depth: 10

matrix:
  include:
    - os: linux
      sudo: required
      before_install:
        - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"
    - os: osx
      before_install:
        - launchctl setenv LIBRARY_PATH /usr/local/lib # for RocksDB
        - HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 brew install ccache
        - export PATH="/usr/local/opt/ccache/libexec:$PATH"

install:
  # build nim from our own branch - this to avoid the day-to-day churn and
  # regressions of the fast-paced Nim development while maintaining the
  # flexibility to apply patches
  - curl -O -L -s -S https://raw.githubusercontent.com/status-im/nimbus-build-system/master/scripts/build_nim.sh
  - env MAKE="make -j2" bash build_nim.sh Nim csources dist/nimble NimBinaries
  - export PATH=$PWD/Nim/bin:$PATH

  # build our own rocksdb to test with a fixed version that we think works
  - curl -O -L -s -S https://raw.githubusercontent.com/status-im/nimbus-build-system/master/scripts/build_rocksdb.sh
  - bash build_rocksdb.sh rocksdbCache

  # no need to cache, lmdb is small and compiles very fast
  - export LMDBVER="0.9.22"
  - "wget https://github.com/LMDB/lmdb/archive/LMDB_$LMDBVER.tar.gz && tar xzf LMDB_$LMDBVER.tar.gz;"
  - cd lmdb-LMDB_$LMDBVER/libraries/liblmdb && make -j2
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sed -i 's| liblmdb.a||' Makefile && sudo make prefix=/usr install; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then sudo cp -a liblmdb.so /usr/local/lib/liblmdb.dylib; fi
  - cd ../../..

script:
  - nimble install -y --depsOnly
  - nimble test
